/*
	1. 자바가 제공하는 기본 타입(시스템 타입 : 원시타입) >> 8가지
	2. 8가지 기본 타입 [값을 저장]하는 타입
	3. 숫자 > 정수 > (음의 정수, 0, 양의정수) byte (8bit) -128 ~ 127  ex) byte b = 10;
	 									char 한문자를 표현하는 자료형 (영문자, 특수문자, 공백) 1byte
	 										 한글 1자 > 2바이트
	 										 협의) char (2바이트) : 한글, 영문자, 특수문자, 공백 상관없이 2바이트로 사용하자.
	 										 크기에 상관없이 2바이트 >> unicode >> 아스키코드
	 										 
	 										 ex) char c = 'A', char c2 = '가'
	 									short (c언어 호환성)
	 									int (-21 ~ 21 억 정수 : 4바이트) *** 정수의 기본 타입 ***
	 									loag(8byte)
		   > 실수(부동소수점) : 			float (4byte)
	 									double(8byte) >> 정밀도가 float 보다 높다(표현되는 수의 범위가 크다) *** 실수의 기본타입 ***
		   논리 > 참, 거짓 > true, flase	boolean
	
	
** 문자열의 표현 ** 
String name = "" 사용 >> String 은 내장 클래스 (참조 타입) 원래는 String str = new String()
평소는 값타입 처럼 사용하자.

자바타입
1. 값타입 : 8가지 기본 > int i = 100; int j = 200;
2. 참조타입(주소값) : 클래스, 배열 : 변수에 값이 저장되는 것이 아니라 주소값이 저장 ref type

 */

//class == 설계도 == Data Type

class Car2{
	//Car2는 데이터 타입, Car2설계도 이다 >> 구체화 >> 메모리 올림.(new)
	String color;
	int window;
}

public class Ex04_DataType {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		String str = new String("asd");
//		System.out.print(str);
		String str = "홍길동";
		int age = 100;
		
		Car2 c; //c는 main 함수 안에 있는 지역 변수이다.
		c = new Car2(); // 지역변수 초기화 실행 불가능.
		//c라는 변수의 초기화 >> 주소값을 가지게 하는것 >> new 연산자를 통해서 메모리에 할당 주소.
		
		System.out.print(c);
		
		
		Car2 c2 = new Car2();
		
		c2.window = 100;
		c2.color = "gold";
		
		int i = 10;
		int j;
		j = 20;
		
		int k;
		k = j; //point (값할당 j 변수가 가지는 값을 k에게 할당)
		System.out.println("k : " + k); //20
		k = 300;
		System.out.println("k : " + k);
		System.out.println("j값은 변환 없다 : " + j);
		
//		int p, q, g; //좋아하지 않음.
		//이런 경우는 Array : int[] arr = new int[3];
		
		//int (-21억 ~ 21억)
		int p = 100000000;
//		int p2 = 10000000000;
		//The literal 10000000000 of type int is out range
		//개발자가 직접 입력한 값 ( 리터널(있는그대로)값 정수값은 int라는 그릇에 담아서 처리한다.)
		//4바이트 그릇인데, 입력한 배열값을 넘어 버림.
		//1. 해결방법
		//long p3 = 10000000000L;
		//long 타입으로 바이트늘리고 변수값도 형식에 맞게 L을 붙인다.
		//즉 리터럴값을 long 그릇으로 담아서 할당.
		
		long l = 100;
		//작은 타입값이 큰 타입에 넣는것은 문제가 안됨. 강제 형변환 시킴.

		
//		int p2 = 10000000000L;
		// 리터럴 값은 이제 문제가 없지만 데이터타입이 이젠 문제가 된다.

		int p2 = (int) 10000000000L;
		//캐스팅 >>타입 변환
		//위처럼 할 경우 나눈 몫의 나머지 데이터가 저장되므로 데이터 손실됨.
		
		
		System.out.print(p2);
		
		
//		char 2byte 정수값
//		한문자를 표현하기 위해서 만든 자료형.
//		영문자 특수문자 공백 한글까지도 한문자로 표현하려고함.
//		문자열 (문자의 집합) : "ㅁㄴㅇㅁㄴㅇ" String name = "as";
// 		문자 (한문자) : 'ㅁ'	char ch = 'a'

		char single = '가';
		System.out.println(single);
		char s = 'A';
		System.out.println(single);
		
		//char 정수 타입
		//char 문자를 저장하지만 내부적으로 정수값을 가지고 있음.
		//정수값은 아스키 코드표를 기반으로 사용.
		//정수 호환
		
		
		int intch = 'A';
		// 내부적으로 자동 형변환이 일어나서.... 암시적(묵시적)
		char ch2 = 'a';
		System.out.println(ch2);
		int intch2 = (int)ch2; //내부적으로 처리되지만 ... casting 직접처리.
		
		System.out.println(intch2);
		
		int intch3 = 65;
		char ch3 = (char)intch3;
		System.out.print(ch3);
		
		//속지말자 (할당에 있어, 값을 보지말고 그값을 담고있는 타입을 보자)
		//명시적 형변환과 암시적 형변환 존재.
		//강제, 명시적 형변환
		
		/*
		 Today point
		 1. 할당에서 변수가 가지고 있는 값을 보지말고 변수의 타입을 보자
		 2. 변수의 타입 크기를 확인하자
		 3. 큰타입에는 작은 타입을 값을 넣을수 있다. 
		 */
	}
}
